// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package users

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO user_account (
  name, email, phone_number, address, user_type
) VALUES (
  $1, $2, $3, $4, $5
)
RETURNING id, name, email, phone_number, address, user_type
`

type CreateUserParams struct {
	Name        string
	Email       string
	PhoneNumber string
	Address     string
	UserType    UserType
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (UserAccount, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Name,
		arg.Email,
		arg.PhoneNumber,
		arg.Address,
		arg.UserType,
	)
	var i UserAccount
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.PhoneNumber,
		&i.Address,
		&i.UserType,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM user_account
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, name, email, phone_number, address, user_type FROM user_account
WHERE email = $1 LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (UserAccount, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i UserAccount
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.PhoneNumber,
		&i.Address,
		&i.UserType,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, name, email, phone_number, address, user_type FROM user_account
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUserById(ctx context.Context, id int32) (UserAccount, error) {
	row := q.db.QueryRowContext(ctx, getUserById, id)
	var i UserAccount
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.PhoneNumber,
		&i.Address,
		&i.UserType,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, name, email, phone_number, address, user_type FROM user_account
`

func (q *Queries) ListUsers(ctx context.Context) ([]UserAccount, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserAccount
	for rows.Next() {
		var i UserAccount
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.PhoneNumber,
			&i.Address,
			&i.UserType,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :exec
UPDATE user_account
  set name = $2,
  email = $3,
  phone_number = $4,
  address = $5,
  user_type = $6
WHERE id = $1
`

type UpdateUserParams struct {
	ID          int32
	Name        string
	Email       string
	PhoneNumber string
	Address     string
	UserType    UserType
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.PhoneNumber,
		arg.Address,
		arg.UserType,
	)
	return err
}
