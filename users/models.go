// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0

package users

import (
	"database/sql/driver"
	"fmt"
)

type UserType string

const (
	UserTypeCustomer        UserType = "customer"
	UserTypeServiceProvider UserType = "service_provider"
)

func (e *UserType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserType(s)
	case string:
		*e = UserType(s)
	default:
		return fmt.Errorf("unsupported scan type for UserType: %T", src)
	}
	return nil
}

type NullUserType struct {
	UserType UserType
	Valid    bool // Valid is true if UserType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserType) Scan(value interface{}) error {
	if value == nil {
		ns.UserType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserType), nil
}

type UserAccount struct {
	ID          int32
	Name        string
	Email       string
	PhoneNumber string
	Address     string
	UserType    UserType
}
